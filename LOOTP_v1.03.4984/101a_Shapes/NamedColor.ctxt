#BlueJ class context
comment0.target=NamedColor
comment0.text=\r\n\ The\ class\ {@code\ NamedColor}\ defines\r\n\ a\ set\ of\ basic\ colors\ for\ shape\ painting.\r\n\ It\ is\ not\ defined\ as\ enum\ to\ allow\ users\r\n\ to\ arbitrarily\ add\ colors\ of\ their\ own.\r\n\r\n\ @author\ \ Rudolf\ PECINOVSK\u00DD\r\n\ @version\ 1.01.4240\ \u2014\ 2012-10-13\r\n
comment1.params=
comment1.target=java.util.List\ getListOfNamedColors()
comment1.text=\r\n\ Returns\ collection\ of\ defined\ named\ colors.\r\n\r\n\ @return\ \ Collection\ of\ defined\ named\ colors.\r\n
comment10.params=red\ green\ blue
comment10.target=NamedColor\ getNamedColor(int,\ int,\ int)
comment10.text=\r\n\ Returns\ opaque\ color\ with\ given\ values\ of\ its\ components.\r\n\ If\ the\ color\ is\ not\ yet\ defined,\ creates\ it\ and\r\n\ assignes\ it\ a\ generic\ name\ according\ to\ its\ component\ values.\r\n\r\n\ @param\ red\ \ \ The\ red\ component\r\n\ @param\ green\ The\ green\ component\r\n\ @param\ blue\ \ The\ blue\ component\r\n\ @return\ \ \ \ \ \ NamedColor\ with\ given\ values\ of\ its\ components\r\n
comment11.params=red\ green\ blue\ alpha
comment11.target=NamedColor\ getNamedColor(int,\ int,\ int,\ int)
comment11.text=\r\n\ Returns\ color\ with\ given\ values\ of\ its\ components\ and\ translucency.\r\n\ If\ the\ color\ is\ not\ yet\ defined,\ creates\ it\ and\r\n\ assigns\ it\ a\ generic\ name\ according\ to\ its\ component\ values.\r\n\r\n\ @param\ red\ \ \ The\ red\ component\r\n\ @param\ green\ The\ green\ component\r\n\ @param\ blue\ \ The\ blue\ component\r\n\ @param\ alpha\ The\ alpha\ component\ \=\ transparency\ level\r\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ 0\=transparent,\ 255\=opaque\r\n\ @return\ \ \ \ \ \ NamedColor\ with\ given\ values\ of\ its\ components\r\n
comment12.params=red\ green\ blue\ name
comment12.target=NamedColor\ getNamedColor(int,\ int,\ int,\ java.lang.String)
comment12.text=\r\n\ Returns\ opaque\ color\ with\ given\ values\ of\ its\ color\ components\r\n\ and\ given\ name.\ If\ the\ color\ is\ not\ yet\ defined,\ it\ creates\ it.\r\n\ If\ the\ color\ with\ given\ name\ exists\ and\ has\ other\ values\ of\ components\r\n\ or\ if\ the\ color\ with\ given\ values\ of\ components\ exists\ and\ has\ another\r\n\ name,\ the\ {@link\ IllegalArgumentException}\ is\ thrown.\r\n\r\n\ @param\ red\ \ \ The\ red\ component\r\n\ @param\ green\ The\ green\ component\r\n\ @param\ blue\ \ The\ blue\ component\r\n\ @param\ name\ \ Name\ of\ asked\ color\r\n\r\n\ @return\ NamedColor\ with\ given\ name\ and\ values\ of\ its\ components\r\n\ @throws\ IllegalArgumentException\ If\ the\ color\ with\ given\ name\ exist\r\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ but\ has\ another\ values\ of\ components\ or\ if\ the\ color\ with\r\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ given\ values\ of\ components\ exists\ but\ has\ another\ name.\r\n
comment13.params=red\ green\ blue\ alpha\ colorName
comment13.target=NamedColor\ getNamedColor(int,\ int,\ int,\ int,\ java.lang.String)
comment13.text=\r\n\ Returns\ color\ with\ given\ values\ of\ its\ color\ components,\ transparency\r\n\ and\ given\ name.\ If\ the\ color\ is\ not\ yet\ defined,\ creates\ it.\r\n\ If\ the\ color\ with\ given\ name\ exist\ and\ has\ another\ values\ of\ components\r\n\ or\ if\ the\ color\ with\ given\ values\ of\ components\ exists\ and\ has\ another\r\n\ name,\ the\ {@link\ IllegalArgumentException}\ is\ thrown.\r\n\r\n\ @param\ red\ \ \ The\ red\ component\r\n\ @param\ green\ The\ green\ component\r\n\ @param\ blue\ \ The\ blue\ component\r\n\ @param\ alpha\ The\ alpha\ component\ \=\ transparency\ level\r\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ 0\=transparent,\ 255\=opaque\r\n\ @param\ colorName\ Name\ of\ asked\ color\r\n\ @return\ NamedColor\ with\ given\ name\ and\ values\ of\ its\ components\r\n\ @throws\ IllegalArgumentException\ If\ the\ color\ with\ given\ name\ exist\r\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ but\ has\ another\ values\ of\ components\ or\ if\ the\ color\ with\r\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ given\ values\ of\ components\ exists\ but\ has\ another\ name.\r\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ Or\ if\ the\ {@code\ name}\ is\ empty.\r\n\ @throws\ NullPointerException\ \ If\ the\ {@code\ name}\ is\ {@code\ null}.\r\n
comment14.params=
comment14.target=java.awt.Color\ getAwtColor()
comment14.text=\r\n\ Converts\ the\ {@code\ NamedColor}\ to\ type\ used\ by\ the\ painter.\r\n\ This\ method\ is\ used\ in\ the\ class\ {@code\ Canvas}.\r\n\r\n\ @return\ Instance\ of\ {@code\ Color}\ representing\ the\ given\ color\r\n
comment15.params=
comment15.target=int\ getIndex()
comment15.text=\r\n\ Returns\ the\ internal\ index\ of\ the\ color.\r\n\r\n\ @return\ Index\ of\ the\ color\r\n
comment16.params=
comment16.target=java.lang.String\ getName()
comment16.text=\r\n\ Returns\ the\ name\ of\ the\ color.\r\n\r\n\ @return\ The\ name\ of\ the\ color\r\n
comment17.params=
comment17.target=java.lang.String\ getNamePrivate()
comment18.params=
comment18.target=NamedColor\ translucent()
comment18.text=\r\n\ Returns\ translucent\ version\ of\ the\ color,\ which\ means\ a\ color\r\n\ with\ the\ same\ color\ components\ and\ alpha\ value\ 0.5.\r\n\r\n\ @return\ Translucent\ version\ of\ the\ color\r\n
comment19.params=
comment19.target=NamedColor\ inverse()
comment19.text=\r\n\ Returns\ color\ inverse\ to\ this\ one,\ which\ means\ the\ color\ with\r\n\ inverse\ values\ of\ components\ but\ with\ the\ same\ transparency.\r\n\r\n\ @return\ Inverse\ color\r\n
comment2.params=
comment2.target=java.util.List\ getListOfNames()
comment2.text=\r\n\ Returns\ list\ of\ names\ of\ defined\ colors.\r\n\r\n\ @return\ Collection\ of\ names\ of\ defined\ colors\r\n
comment20.params=
comment20.target=NamedColor\ lessTransparent()
comment20.text=\r\n\ Return\ a\ less\ transparent\ version\ of\ the\ color.\r\n\ Mind\ that\ the\ operation\ is\ not\ fully\ reversible\ during\ the\ rounding.\r\n\r\n\ @return\ Less\ transparent\ color\r\n
comment21.params=
comment21.target=NamedColor\ moreTransparent()
comment21.text=\r\n\ Return\ a\ more\ transparent\ version\ of\ the\ color.\r\n\ Mind\ that\ the\ operation\ is\ not\ fully\ reversible\ during\ the\ rounding.\r\n\r\n\ @return\ Less\ transparent\ color\r\n
comment22.params=
comment22.target=NamedColor\ brighter()
comment22.text=\r\n\ Return\ a\ brighter\ version\ of\ the\ color.\r\n\ Mind\ that\ the\ operation\ is\ not\ fully\ reversible\ during\ the\ rounding.\r\n\r\n\ @return\ Brighter\ color\r\n
comment23.params=
comment23.target=NamedColor\ darker()
comment23.text=\r\n\ Return\ a\ darker\ version\ of\ the\ color.\r\n\ Mind\ that\ the\ operation\ is\ not\ fully\ reversible\ during\ the\ rounding.\r\n\r\n\ @return\ Darker\ color\r\n
comment24.params=
comment24.target=java.lang.String\ toString()
comment24.text=\r\n\ Returns\ the\ name\ of\ the\ color.\r\n\r\n\ @return\ \ Name\ of\ the\ color\r\n
comment25.params=
comment25.target=java.lang.String\ getCharacteristicsHexPrivate()
comment25.text=\r\n\ Returns\ the\ string\ with\ values\ of\ particular\ components\r\n\ shown\ in\ the\ hexadecimal\ radix.\r\n\r\n\ @return\ String\ with\ the\ requested\ characteristic\r\n
comment26.params=name
comment26.target=NamedColor\ namedColor(java.lang.String)
comment26.text=\r\n\ Returns\ the\ color\ with\ the\ given\ name\ ignoring\ accents.\r\n\r\n\ @param\ name\ Name\ of\ the\ searched\ color\r\n\ @return\ Color\ with\ the\ given\ name\ or\ {@code\ null}.\r\n
comment27.params=c
comment27.target=NamedColor\ getNamedColor(java.awt.Color)
comment27.text=\r\n\ Returns\ a\ named\ color\ wrapping\ the\ given\ awt\ color.\r\n\ If\ the\ color\ is\ not\ yet\ defined,\ it\ creates\ it\ and\r\n\ assignes\ it\ a\ generic\ name\ according\ to\ its\ component\ values.\r\n\r\n\ @param\ c\ The\ "parent"\ awt\ color\r\n\ @return\ A\ named\ color\ wrapping\ the\ given\ awt\ color\r\n
comment28.params=
comment28.target=void\ addNameWithoutAccents()
comment28.text=\r\n\ If\ the\ name\ contans\ characters\ with\ accent,\r\n\ it\ add\ into\ the\ appropriate\ map\ this\ name\ without\ accents.\r\n
comment3.params=
comment3.target=NamedColor[]\ getArrayOfNamedColors()
comment3.text=\r\n\ Returns\ array\ of\ defined\ named\ colors.\r\n\r\n\ @return\ \ Array\ of\ defined\ named\ colors\r\n
comment4.params=
comment4.target=java.lang.String[]\ getArrayOfNames()
comment4.text=\r\n\ Returns\ array\ of\ names\ of\ defined\ colors.\r\n\r\n\ @return\ \ Array\ of\ names\ of\ defined\ colors.\r\n
comment5.params=inUpperCase
comment5.target=boolean\ setInUppercase(boolean)
comment5.text=\r\n\ Sets\ if\ the\ names\ should\ be\ written\ in\ uppercase.\r\n\r\n\ @param\ inUpperCase\ {@code\ true}\ if\ names\ should\ be\ written\ in\ uppercase,\r\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ {@code\ false}\ otherwise\r\n\ @return\ \ \ \ \ \ \ \ \ \ \ \ Original\ setting\r\n
comment6.params=
comment6.target=void\ showDefinedNames()
comment6.text=\r\n\ Opens\ a\ dialog\ box\ with\ all\ defined\ names\ separated\ by\ commas.\r\n\ The\ names\ are\ alphabetically\ sorted.\r\n
comment7.params=red\ green\ blue\ alpha\ name
comment7.target=NamedColor(int,\ int,\ int,\ int,\ java.lang.String)
comment7.text=\r\n\ Creates\ a\ new\ color\ with\ given\ values\ of\ its\ componnents\r\n\ with\ transparency\ level\ set\ in\ alpha\ channel\ and\r\n\ with\ the\ provided\ name.\r\n\r\n\ @param\ red\ \ \ \ \ The\ red\ component\r\n\ @param\ green\ \ \ The\ green\ component\r\n\ @param\ blue\ \ \ \ The\ blue\ component\r\n\ @param\ alpha\ \ \ The\ alpha\ component\ \=\ transparency\ level\r\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ 0\=transparent,\ 255\=opaque\r\n\ @param\ name\ \ \ \ Name\ of\ the\ created\ color\r\n
comment8.params=color\ colorName
comment8.target=NamedColor(java.awt.Color,\ java.lang.String)
comment8.text=\r\n\ Creates\ an\ instance\ wrapping\ the\ given\ instance\ of\ class\r\n\ {@link\ java.awt.Color}\ and\ having\ the\ given\ name.\r\n\ The\ purpose\ of\ this\ constructor\ is\ simple\ passing\ component\ values\r\n\ of\ the\ equally\ named\ colors\ defined\ as\ named\ constants\r\n\ in\ the\ class\ {@link\ java.awt.Color}.\r\n\r\n\ @param\ color\ \ \ \ \ The\ {@link\ java.awt.Color}\ to\ be\ wraped\r\n\ @param\ colorName\ The\ name\ of\ the\ color\ to\ be\ created;\r\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ {@code\ null}\ is\ a\ request\ to\ create\ generic\ name\r\n
comment9.params=colorName
comment9.target=NamedColor\ getNamedColor(java.lang.String)
comment9.text=\r\n\ Converts\ the\ color\ name\ to\ its\ respective\ {@code\ NamedColor}\ instance\r\n\r\n\ @param\ colorName\ The\ name\ of\ the\ requested\ color.\ The\ list\ of\ existing\r\n\ \ \ \ \ \ \ \ \ names\ returns\ the\ method\ <b>{@link\ \#getListOfNames()}</b>\r\n\ @return\ Instance\ of\ {@code\ NamedColor}\ representing\ the\ given\ name\r\n\ @throws\ IllegalArgumentException\r\n\ \ \ \ \ \ \ \ \ If\ the\ color\ of\ the\ given\ name\ is\ not\ defined\ yet\r\n
numComments=29
