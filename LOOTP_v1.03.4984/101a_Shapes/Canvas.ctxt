#BlueJ class context
comment0.target=Canvas
comment0.text=\r\n\ The\ instance\ of\ class\ {@code\ Canvas}\ (singleton)\ serves\ as\ a\ virtual\ canvas,\r\n\ on\ which\ the\ shapes\ can\ be\ painted.\r\n\ <p>\r\n\ The\ class\ doesn't\ offer\ the\ public\ constructor\ to\ others\r\n\ because\ its\ instance\ should\ be\ a\ singleton\r\n\ to\ ensure\ that\ all\ shapes\ will\ be\ painted\ on\ the\ same\ canvas.\r\n\ The\ only\ way\ of\ getting\ the\ reference\ to\ canvas\r\n\ is\ calling\ the\ static\ factory\ method\ {@link\ \#getCanvas()}.</p>\r\n\ <p>\r\n\ To\ allow\ a\ simple\ painting\r\n\ without\ some\ registration,\r\n\ the\ rubbed\ out\ parts\ of\ the\ painted\ shapes\ are\ not\ restored.\r\n\ If\ therefore\ is\ a\ part\ of\ another\ shape\ rubbed\ out\ as\ a\ side\ effect,\r\n\ the\ damaged\ shape\ should\ be\ repainted\ explicitly.\r\n\r\n\ @author\ \ Rudolf\ PECINOVSK\u00DD\r\n\ @version\ 1.01.4240\ \u2014\ 2012-10-13\r\n
comment1.params=
comment1.target=void\ clearCanvas()
comment1.text=\r\n\ Clears\ the\ canvas,\ it\ means\ that\ it\ erases\ all\ the\ shapes\ on\ the\ canvas.\r\n\ Rightly\ this\ method\ should\ be\ defined\ as\ instance\ method,\r\n\ however,\ because\ the\ instance\ is\ defined\ as\ a\ singleton\r\n\ the\ method\ is\ defined\ as\ static\ to\ allow\ to\ clear\ the\ canvas\r\n\ without\ obtaining\ the\ reference\ to\ its\ instance.\r\n
comment10.params=color
comment10.target=void\ setForegroundColor(NamedColor)
comment10.text=\r\n\ Set\ the\ color\ of\ painting.\r\n\r\n\ @param\ color\ Set\ painting\ color\r\n
comment11.params=
comment11.target=int\ getWidth()
comment11.text=\r\n\ Returns\ the\ canvas\ width\ in\ pixels.\r\n\r\n\ @return\ Pixel\ width\ of\ the\ canvas\r\n
comment12.params=
comment12.target=int\ getHeight()
comment12.text=\r\n\ Returns\ the\ canvas\ height\ in\ pixels.\r\n\r\n\ @return\ Pixel\ height\ of\ the\ canvas\r\n
comment13.params=width\ height
comment13.target=void\ setSize(int,\ int)
comment13.text=\r\n\ Set\ the\ new\ size\ of\ the\ canvas.\r\n\r\n\ @param\ \ width\ \ \ The\ new\ canvas\ width\ in\ pixels\r\n\ @param\ \ height\ \ The\ new\ canvas\ height\ in\ pixels\r\n
comment14.params=x1\ y1\ x2\ y2\ color
comment14.target=void\ drawLine(int,\ int,\ int,\ int,\ NamedColor)
comment14.text=\r\n\ Draws\ a\ line\r\n\ with\ given\ starting\ and\ ending\ point\ and\ given\ color.\r\n\r\n\ @param\ \ x1\ \ \ \ The\ horizontal\ coordinate\ of\ the\ start\ of\ the\ drawn\ line\r\n\ @param\ \ y1\ \ \ \ The\ vertical\ coordinate\ of\ the\ start\ of\ the\ drawn\ line\r\n\ @param\ \ x2\ \ \ \ The\ horizontal\ coordinate\ of\ the\ end\ of\ the\ drawn\ line\r\n\ @param\ \ y2\ \ \ \ The\ vertical\ coordinate\ of\ the\ end\ of\ the\ drawn\ line\r\n\ @param\ \ color\ The\ color\ of\ the\ drawn\ line\r\n
comment15.params=text\ x\ y\ color
comment15.target=void\ drawString(java.lang.String,\ int,\ int,\ NamedColor)
comment15.text=\r\n\ Draws\ the\ given\ text\ by\ current\ font\ and\ given\ color.\r\n\r\n\ @param\ text\ \ \ The\ drawn\ text.\r\n\ @param\ x\ \ \ \ \ \ The\ horizontal\ coordinate\ of\ the\ drawn\ text\r\n\ @param\ y\ \ \ \ \ \ The\ vertical\ coordinate\ of\ the\ drawn\ text\r\n\ @param\ color\ \ The\ color\ of\ the\ drawn\ text\r\n
comment16.params=
comment16.target=void\ clear()
comment16.text=\r\n\ Clears\ the\ canvas,\ it\ means\ that\ it\ erases\ all\ the\ shapes\ on\ the\ canvas.\r\n
comment17.params=shape
comment17.target=void\ erase(java.awt.Shape)
comment17.text=\r\n\ Erases\ the\ given\ shape.\ However\ its\ instance\ still\ exist,\r\n\ it\ is\ only\ not\ visible,\ because\ it\ is\ panted\ by\ background\ color.\r\n\r\n\ @param\ shape\ Shape\ which\ should\ be\ erased.\r\n
comment18.params=
comment18.target=java.lang.String\ toString()
comment18.text=\r\n\ Returns\ the\ string\ representation\ of\ canvas.\r\n\ It\ is\ used\ mainly\ by\ debugging.\r\n\r\n\ @return\ The\ string\ representation\ of\ the\ canvas.\r\n
comment19.params=shape
comment19.target=void\ fill(java.awt.Shape)
comment19.text=\r\n\ Paints\ the\ given\ shape\ and\ fiil\ it\ by\ the\ canvas\ color.\r\n\r\n\ @param\ shape\ Shape\ which\ should\ be\ painted.\r\n
comment2.params=
comment2.target=Canvas\ getCanvas()
comment2.text=\r\n\ The\ only\ method\ allowing\ to\ get\ reference\ to\ instance\ of\ canvas.\r\n\ However,\ because\ the\ instance\ is\ defined\ as\ a\ singleton,\r\n\ the\ method\ returns\ every\ time\ the\ reference\ to\ the\ same\ instance.\r\n\r\n\ @return\ The\ reference\ to\ the\ singleton\ instance\ of\ the\ class\r\n
comment20.params=
comment20.target=java.awt.Point\ configurationFromFile()
comment20.text=\r\n\ Initialize\ some\ parameters\ from\ the\ configuration\ file.\r\n\ This\ file\ is\ placed\ in\ the\ user\ home\ directory\r\n\ in\ the\ folder\ {@code\ .rup}\ in\ the\ file\ {@code\ bluej.properties}.\r\n\ It\ is\ meant\ primary\ for\ teachers\ to\ make\ easy\ placing\ the\ window\r\n\ by\ working\ with\ several\ displays,\ but\ only\ one\ visible\ by\ students.\r\n\r\n\ @return\ The\ initial\ canvas\ position\r\n
comment21.params=
comment21.target=void\ initialize()
comment21.text=\r\n\ Initialize\ a\ canvas\ manager\ by\ putting\ the\ initializing\ code\r\n\ into\ the\ AWT\ Event\ Queue.\r\n
comment22.params=
comment22.target=void\ run()
comment23.params=
comment23.target=void\ prepareImage()
comment23.text=\r\n\ Prepares\ the\ image,\ on\ which\ the\ all\ shapes\ will\ be\ painted.\r\n
comment24.params=width\ height
comment24.target=void\ setSizePrivate(int,\ int)
comment24.text=\r\n\ Set\ only\ the\ size\ of\ the\ canvas.\r\n\ It\ is\ a\ private\ version\ intended\ only\ for\ the\ constructor.\r\n\ The\ public\ version\ add\ making\ the\ window\ visible\ and\ preparing\ the\ image.\r\n\r\n\ @param\ width\ \ The\ set\ canvas\ width\ in\ points\r\n\ @param\ height\ The\ set\ canvas\ height\ in\ points\r\n
comment25.params=
comment25.target=void\ setVisibleInternal()
comment25.text=\r\n\ Method\ called\ from\ the\ event\ thread.\r\n
comment3.params=position
comment3.target=Canvas(java.awt.Point)
comment3.text=\r\n\ The\ default\ (and\ only)\ constructor.\r\n\ It\ is\ called\ only\ once\ in\ the\ {@link\ \#SINGLETON}\ declaration.\r\n\r\n\ @param\ position\ The\ initial\ position\ of\ the\ application\ window\r\n
comment4.params=g
comment4.target=void\ paintComponent(java.awt.Graphics)
comment4.text=\ The\ obligatorily\ overridden\ method\r\nof\ the\ class\ {@link\ JPanel}.
comment5.params=
comment5.target=boolean\ isVisible()
comment5.text=\r\n\ Indicates\ whether\ the\ canvas\ application\ window\ is\ visible.\r\n\ However\ even\ the\ visible\ windows\ can\ be\ hiden\ by\ another\ windows.\r\n\r\n\ @return\ If\ the\ window\ is\ visible,\ it\ returns\ <b>true</b>,\r\n\ \ \ \ \ \ \ \ \ otherwise\ it\ returns\ <b>false</b>\r\n
comment6.params=visible
comment6.target=void\ setVisible(boolean)
comment6.text=\r\n\ Set\ the\ visibility\ of\ canvas\ application\ window.\r\n\r\n\ @param\ visible\ {@code\ true}\ if\ the\ application\ window\ should\ be\ visible,\r\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ otherwise\ {@code\ false}\r\n
comment7.params=
comment7.target=void\ run()
comment8.params=
comment8.target=NamedColor\ getBackgroundColor()
comment8.text=\r\n\ Returns\ the\ current\ canvas\ color\ (\=\ background\ color).\r\n\r\n\ @return\ Current\ background\ color\r\n
comment9.params=color
comment9.target=void\ setBackgroundColor(NamedColor)
comment9.text=\r\n\ Set\ the\ current\ canvas\ color\ (\=\ background\ color).\r\n\r\n\ @param\ color\ \ The\ set\ canvas\ color\r\n
numComments=26
